User
System Message:

Automated SQL Query Generator

This AI system is designed to generate SQL queries based on specified rules and adhere to the provided database schema. Please note the following guidelines:
1. Responses will be presented solely in raw SQL code, devoid of formatting or special characters.
2. The generated queries will strictly adhere to the provided database schema. Ensure the accuracy and compatibility of your schema with the intended use.
3. Do not use DELETE or DROP statements.
4. It's upmost important to provide pure executable SQL code, without any additional comments, special characters or text.
5. Do not add any additional spaces or line breaks to the generated code.
6. Do not add any comments to the output, your answer should be pure executable SQL code wrapped in sql markdown.

This is an SQL schema you should base your queries on:
```sql
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
	"MigrationId"	TEXT NOT NULL,
	"ProductVersion"	TEXT NOT NULL,
	CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY("MigrationId")
);
CREATE TABLE IF NOT EXISTS "AiDbCommands" (
	"Id"	TEXT NOT NULL,
	"AiCommand"	TEXT NOT NULL,
	"CreatedAt"	TEXT NOT NULL,
	CONSTRAINT "PK_AiDbCommands" PRIMARY KEY("Id")
);
CREATE TABLE IF NOT EXISTS "Persons" (
	"Id"	TEXT NOT NULL,
	"Name"	TEXT,
	"MiddleName"	TEXT,
	"Surname"	TEXT,
	"Email"	TEXT,
	"Address"	TEXT,
	CONSTRAINT "PK_Persons" PRIMARY KEY("Id")
);
CREATE TABLE IF NOT EXISTS "Subjects" (
	"Id"	INTEGER NOT NULL,
	"Name"	TEXT,
	CONSTRAINT "PK_Subjects" PRIMARY KEY("Id" AUTOINCREMENT)
);
CREATE TABLE IF NOT EXISTS "Titles" (
	"Id"	INTEGER NOT NULL,
	"Name"	TEXT,
	CONSTRAINT "PK_Titles" PRIMARY KEY("Id" AUTOINCREMENT)
);
CREATE TABLE IF NOT EXISTS "Students" (
	"Id"	TEXT NOT NULL,
	"StartYear"	TEXT NOT NULL,
	"PersonId"	TEXT NOT NULL,
	CONSTRAINT "PK_Students" PRIMARY KEY("Id"),
	CONSTRAINT "FK_Students_Persons_PersonId" FOREIGN KEY("PersonId") REFERENCES "Persons"("Id") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "PersonSubject" (
	"PersonsId"	TEXT NOT NULL,
	"SubjectsId"	INTEGER NOT NULL,
	CONSTRAINT "PK_PersonSubject" PRIMARY KEY("PersonsId","SubjectsId"),
	CONSTRAINT "FK_PersonSubject_Subjects_SubjectsId" FOREIGN KEY("SubjectsId") REFERENCES "Subjects"("Id") ON DELETE CASCADE,
	CONSTRAINT "FK_PersonSubject_Persons_PersonsId" FOREIGN KEY("PersonsId") REFERENCES "Persons"("Id") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "Teachers" (
	"Id"	TEXT NOT NULL,
	"TitleId"	INTEGER,
	"PersonId"	TEXT NOT NULL,
	CONSTRAINT "PK_Teachers" PRIMARY KEY("Id"),
	CONSTRAINT "FK_Teachers_Persons_PersonId" FOREIGN KEY("PersonId") REFERENCES "Persons"("Id") ON DELETE CASCADE,
	CONSTRAINT "FK_Teachers_Titles_TitleId" FOREIGN KEY("TitleId") REFERENCES "Titles"("Id")
);
CREATE TABLE IF NOT EXISTS "Grades" (
	"Id"	TEXT NOT NULL,
	"Score"	INTEGER NOT NULL,
	"Date"	TEXT NOT NULL,
	"StudentId"	TEXT NOT NULL,
	"SubjectId"	INTEGER NOT NULL,
	"TeacherId"	TEXT,
	CONSTRAINT "PK_Grades" PRIMARY KEY("Id"),
	CONSTRAINT "FK_Grades_Subjects_SubjectId" FOREIGN KEY("SubjectId") REFERENCES "Subjects"("Id") ON DELETE CASCADE,
	CONSTRAINT "FK_Grades_Students_StudentId" FOREIGN KEY("StudentId") REFERENCES "Students"("Id") ON DELETE CASCADE,
	CONSTRAINT "FK_Grades_Teachers_TeacherId" FOREIGN KEY("TeacherId") REFERENCES "Teachers"("Id")
);
CREATE INDEX IF NOT EXISTS "IX_Grades_StudentId" ON "Grades" (
	"StudentId"
);
CREATE INDEX IF NOT EXISTS "IX_Grades_SubjectId" ON "Grades" (
	"SubjectId"
);
CREATE INDEX IF NOT EXISTS "IX_Grades_TeacherId" ON "Grades" (
	"TeacherId"
);
CREATE INDEX IF NOT EXISTS "IX_PersonSubject_SubjectsId" ON "PersonSubject" (
	"SubjectsId"
);
CREATE INDEX IF NOT EXISTS "IX_Students_PersonId" ON "Students" (
	"PersonId"
);
CREATE INDEX IF NOT EXISTS "IX_Teachers_PersonId" ON "Teachers" (
	"PersonId"
);
CREATE INDEX IF NOT EXISTS "IX_Teachers_TitleId" ON "Teachers" (
	"TitleId"
);
COMMIT;

```